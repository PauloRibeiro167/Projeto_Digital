# Nome da sua aplicação. Usado para configurar containers de forma única.
service: digital_stor

# Nome da imagem do container.
image: your-user/digital_stor

# Servidores para deploy.
servers:
  web:
    - 192.168.0.1

# Habilitar SSL automático via Let's Encrypt.
proxy:
  ssl: true
  host: app.example.com

# Credenciais para o host da imagem.
registry:
  username: your-user
  password:
    - KAMAL_REGISTRY_PASSWORD

# Injetar variáveis de ambiente nos containers.
env:
  secret:
    - RAILS_MASTER_KEY
  clear:
    SOLID_QUEUE_IN_PUMA: true

# Aliases para comandos comuns.
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"

# Usar um volume de armazenamento persistente.
volumes:
  - "digital_stor_storage:/rails/storage"

# Configurar o caminho dos assets.
asset_path: /rails/public/assets

# Configurar o construtor de imagem.
builder:
  arch: amd64

# Comandos para construir o frontend após a atualização do código.
hooks:
  after_build:
    - cd frontend && npm install && npm run build

# Usar um usuário SSH diferente de root.
# ssh:
#   user: app

# Usar serviços acessórios.
# accessories:
#   db:
#     image: mysql:8.0
#     host: 192.168.0.2
#     port: 3306
#     env:
#       clear:
#         MYSQL_ROOT_HOST: '%'
#       secret:
#         - MYSQL_ROOT_PASSWORD
#     files:
#       - config/mysql/production.cnf:/etc/mysql/my.cnf
#       - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
#     directories:
#       - data:/var/lib/mysql
#   redis:
#     image: redis:7.0
#     host: 192.168.0.2
#     port: 6379
#     directories:
#       - data:/data